[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Logic",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7361e20fe34a37d4",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "efb1c3cb4ec1b96e",
        "type": "subflow",
        "name": "Charge Current",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "01b3f7383b477df5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 100,
                "wires": [
                    {
                        "id": "29132266ba2a58e1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 230,
            "y": 180,
            "wires": [
                {
                    "id": "45e7a020507cab3a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "cb6405dfef5678b9",
        "type": "subflow",
        "name": "3 Phase",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e727d8256d3693b3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "d3492816a859ba40",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 220,
            "y": 160,
            "wires": [
                {
                    "id": "5d04a38ddacc9d16",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "017d5dad7f46622e",
        "type": "subflow",
        "name": "Killswitch Current",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "975816aaf55ab39d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 60,
                "wires": [
                    {
                        "id": "ab3c55f7ff3ece2e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 240,
            "y": 140,
            "wires": [
                {
                    "id": "f39ab9d5ddbeb229",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2fd256c6966e229b",
        "type": "subflow",
        "name": "Go-eCharger Get State",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "42468243cfcf83f1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 60,
                "wires": [
                    {
                        "id": "82879aea8ce581e8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 220,
            "y": 120,
            "wires": [
                {
                    "id": "54a08cee2ec39c85",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e0df0ca748936d99",
        "type": "subflow",
        "name": "Go-eCharger Set Current",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "26a7bb8f698df819"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 80,
                "wires": [
                    {
                        "id": "fd703550e95ab36f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 240,
            "y": 160,
            "wires": [
                {
                    "id": "462856bded12346e",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "39e4f6d7bc65b2db",
        "type": "subflow",
        "name": "Go-eCharger Set State",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "ad56b12f4b0267e7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 60,
                "wires": [
                    {
                        "id": "6c60cc0e10dbb554",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 210,
            "y": 140,
            "wires": [
                {
                    "id": "0c116f1b76d5bc61",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "468aa6b1e72fc9d2",
        "type": "subflow",
        "name": "Test Load",
        "info": "Add random gain to the input values",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 80,
                "wires": [
                    {
                        "id": "c4a38b1d8901c4a5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "c4a38b1d8901c4a5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "minCurrent",
                "type": "num",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "Min Current"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "maxCurrent",
                "type": "num",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "Max Current"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "bypass",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Bypass"
                    },
                    "type": "checkbox"
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 270,
            "y": 160,
            "wires": [
                {
                    "id": "2d25d99fd9396d90",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ed9c44006b3afbd1",
        "type": "subflow",
        "name": "MQTT Publish",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "65395490d8b06483"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "df1407b1752224f3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c456f62e30a15dfe",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "eb72cd72095be319",
        "type": "ui_group",
        "name": "Controls",
        "tab": "4f133d49b124c7f6",
        "order": 1,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4f133d49b124c7f6",
        "type": "ui_tab",
        "name": "Dynamic Charge Monitor",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b99cca3d03988dbb",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ea05100403028c32",
        "type": "ui_group",
        "name": "Graphs",
        "tab": "4f133d49b124c7f6",
        "order": 2,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "01b3f7383b477df5",
        "type": "function",
        "z": "efb1c3cb4ec1b96e",
        "name": "Charge Current",
        "func": "var brakerSize = 25;\nvar minChargeAmps = 6;\nvar maxChargeAmps =  Number(global.get(\"maxChargeAmps\", \"persist\")) || minChargeAmps;\nvar amps = null;\nvar maxPhase = msg.maxPhase.value;\nvar prevAmps = flow.get('prevAmps');\nvar availAmps = Math.round(brakerSize - maxPhase) + prevAmps;\n\nnode.error(`max phase amps ${maxPhase}`);\nnode.error(`available amps ${availAmps}`);\n\nif (availAmps >= maxChargeAmps) {\n    amps = maxChargeAmps;\n    node.error(`setting charge amps to ${amps} (max)`);\n} else if (availAmps < maxChargeAmps && availAmps >= minChargeAmps) {\n    amps = availAmps;\n    node.error(`setting charge amps to ${amps}`);\n} else if (availAmps < minChargeAmps) {\n    amps = minChargeAmps;\n    node.error(`available amps below ${minChargeAmps}, stopping charging`);\n}\n\nmsg.topic = 'amps';\nmsg.payload = amps;\nmsg.maxChargeAmps = maxChargeAmps;\nflow.set('prevAmps', amps);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar prevAmps = flow.set(\"prevAmps\", 6);",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "115c2ac026ab67e0"
            ]
        ]
    },
    {
        "id": "45e7a020507cab3a",
        "type": "status",
        "z": "efb1c3cb4ec1b96e",
        "name": "",
        "scope": [
            "29132266ba2a58e1"
        ],
        "x": 100,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "29132266ba2a58e1",
        "type": "function",
        "z": "efb1c3cb4ec1b96e",
        "name": "Status",
        "func": "node.status({\n    fill: 'green',\n    shape: 'dot',\n    text:`Charging current ${msg.payload} A`\n});\n\nmsg.curr = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "115c2ac026ab67e0",
        "type": "moving-average",
        "z": "efb1c3cb4ec1b96e",
        "name": "30 s average",
        "amount": "6",
        "weight": "cumulative",
        "x": 390,
        "y": 100,
        "wires": [
            [
                "ce132e23a5f6a979"
            ]
        ]
    },
    {
        "id": "ce132e23a5f6a979",
        "type": "change",
        "z": "efb1c3cb4ec1b96e",
        "name": "Round",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "29132266ba2a58e1"
            ]
        ]
    },
    {
        "id": "a55bcc5416296677",
        "type": "delay",
        "z": "cb6405dfef5678b9",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 80,
        "wires": [
            [
                "d3492816a859ba40"
            ]
        ]
    },
    {
        "id": "e727d8256d3693b3",
        "type": "join",
        "z": "cb6405dfef5678b9",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "0.1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "7e199a522a05343e"
            ]
        ]
    },
    {
        "id": "7e199a522a05343e",
        "type": "function",
        "z": "cb6405dfef5678b9",
        "name": "",
        "func": "var out = {};\nvar arr = [\n    {\n        i:'/0/current',\n        o: 'l1'\n    },\n    {\n        i:'1/current',\n        o: 'l2'\n    },\n    {\n        i: '2/current',\n        o: 'l3'\n    }]\nvar keys = Object.keys(msg.payload);\n\narr.forEach(function(item) {\n    keys.forEach(function(name) {\n        if (name.indexOf(item.i) !== -1) {\n            out[item.o] = Number(msg.payload[name]);\n        }\n    })\n})\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 80,
        "wires": [
            [
                "a55bcc5416296677"
            ]
        ]
    },
    {
        "id": "d3492816a859ba40",
        "type": "function",
        "z": "cb6405dfef5678b9",
        "name": "Status",
        "func": "var color = 'green';\nvar shape = flow.get('shape');\n\nnode.status({\n    fill: color,\n    shape: shape,\n    text:`${msg.payload.l1} ${msg.payload.l2} ${msg.payload.l3}`\n});\nflow.set('shape', shape === 'dot' ? 'ring' : 'dot');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar shape = 'dot';\nflow.set('shape', shape)",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5d04a38ddacc9d16",
        "type": "status",
        "z": "cb6405dfef5678b9",
        "name": "",
        "scope": [
            "d3492816a859ba40"
        ],
        "x": 100,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a0fd10c193de8961",
        "type": "moving-average",
        "z": "017d5dad7f46622e",
        "name": "30 s average",
        "amount": "6",
        "weight": "cumulative",
        "x": 470,
        "y": 60,
        "wires": [
            [
                "ab3c55f7ff3ece2e"
            ]
        ]
    },
    {
        "id": "f39ab9d5ddbeb229",
        "type": "status",
        "z": "017d5dad7f46622e",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ab3c55f7ff3ece2e",
        "type": "function",
        "z": "017d5dad7f46622e",
        "name": "Status",
        "func": "node.status({\n    fill: 'green',\n    shape: 'dot',\n    text:`Average load ${msg.payload.toFixed(2)} A`\n});\n\nmsg.topic = \"killswitch\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "975816aaf55ab39d",
        "type": "change",
        "z": "017d5dad7f46622e",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.value",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 60,
        "wires": [
            [
                "a0fd10c193de8961"
            ]
        ]
    },
    {
        "id": "2f74981939290283",
        "type": "http request",
        "z": "2fd256c6966e229b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 330,
        "y": 60,
        "wires": [
            [
                "82879aea8ce581e8"
            ]
        ]
    },
    {
        "id": "42468243cfcf83f1",
        "type": "function",
        "z": "2fd256c6966e229b",
        "name": "URL",
        "func": "const host = env.get(\"GO_E_CHARGER_HOST\");\nmsg.url = `http://${host}/api/status?filter=car`;\nmsg.origPayload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            [
                "2f74981939290283"
            ]
        ]
    },
    {
        "id": "54a08cee2ec39c85",
        "type": "status",
        "z": "2fd256c6966e229b",
        "name": "",
        "scope": [
            "82879aea8ce581e8"
        ],
        "x": 100,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "82879aea8ce581e8",
        "type": "function",
        "z": "2fd256c6966e229b",
        "name": "Status",
        "func": "var color = 'green';\nvar text = null;\nvar status = null;\n\nif (msg.statusCode !== 200) {\n    color = 'red';\n    text = `HTTP ${msg.statusCode}: ${msg.payload}`\n} else {\n    status = JSON.parse(msg.payload);\n    if (status.car === null) {\n        text = 'Go-eCharger internal error';\n        color = 'red';\n        msg.chargerStatus = 'Error';\n    } else if (status.car === 0) {\n        text = 'Go-eCharger unknown error';\n        color = 'red';\n        msg.chargerStatus = 'Error';\n    } else if (status.car === 1) {\n        text = 'Idle';\n        color = 'green';\n        msg.chargerStatus = 'Idle';\n    } else if (status.car === 2) {\n        text = 'Charging';\n        color = 'green';\n        msg.chargerStatus = 'Charging';\n    } else if (status.car === 3) {\n        text = 'Wait Car';\n        color = 'green';\n        msg.chargerStatus = 'Wait Car';\n    } else if (status.car === 4) {\n        text = 'Complete';\n        color = 'green';\n        msg.chargerStatus = 'Complete';\n    } else if (status.car === 5) {\n        text = 'Error';\n        color = 'red';\n        msg.chargerStatus = 'Error';\n    } else {\n        text = 'Unknown State';\n        color = 'red';\n        msg.chargerStatus = 'Unknown';\n    }\n} \n\nnode.status({\n    fill: color,\n    shape: 'dot',\n    text: text\n});\n\nmsg.payload = msg.origPayload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "50c1d4f8f611841b",
        "type": "http request",
        "z": "e0df0ca748936d99",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 350,
        "y": 80,
        "wires": [
            [
                "fd703550e95ab36f"
            ]
        ]
    },
    {
        "id": "26a7bb8f698df819",
        "type": "function",
        "z": "e0df0ca748936d99",
        "name": "URL",
        "func": "const host = env.get(\"GO_E_CHARGER_HOST\");\nmsg.url = `http://${host}/api/set?amp=${msg.curr}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "50c1d4f8f611841b"
            ]
        ]
    },
    {
        "id": "fd703550e95ab36f",
        "type": "function",
        "z": "e0df0ca748936d99",
        "name": "Status",
        "func": "var color = 'green';\nvar text = null;\n\nif (msg.statusCode !== 200) {\n    color = 'red';\n    text = `HTTP ${msg.statusCode}: ${msg.payload}`\n} else {\n    var status = JSON.parse(msg.payload);\n    if (status.amp) {\n        color = 'green';\n        text = `Set ${msg.curr} A`\n    } else {\n        color = 'red';\n        text = `${status}`\n    }\n} \n\nnode.status({\n    fill: color,\n    shape: 'dot',\n    text: text\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "462856bded12346e",
        "type": "status",
        "z": "e0df0ca748936d99",
        "name": "",
        "scope": [
            "fd703550e95ab36f"
        ],
        "x": 120,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "71cd034f4629ade0",
        "type": "http request",
        "z": "39e4f6d7bc65b2db",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 330,
        "y": 60,
        "wires": [
            [
                "6c60cc0e10dbb554"
            ]
        ]
    },
    {
        "id": "ad56b12f4b0267e7",
        "type": "function",
        "z": "39e4f6d7bc65b2db",
        "name": "URL",
        "func": "var val = 0;\n// Continue Charging\nif (msg.payload) {\n    val = 0;\n// Stop Charging\n} else {\n    val = 1;\n}\nconst host = env.get(\"GO_E_CHARGER_HOST\");\nmsg.url = `http://${host}/api/set?frc=${val}`;\nmsg.payload_in = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            [
                "71cd034f4629ade0"
            ]
        ]
    },
    {
        "id": "6c60cc0e10dbb554",
        "type": "function",
        "z": "39e4f6d7bc65b2db",
        "name": "Status",
        "func": "var color = 'green';\nvar text = null;\nvar today = new Date();\nvar hours = (\"0\" + today.getHours()).slice(-2);\nvar mins = (\"0\" + today.getMinutes()).slice(-2);\nvar secs = (\"0\" + today.getSeconds()).slice(-2);\nvar time = `${hours}:${mins}:${secs}UTC`;\n\nif (msg.statusCode !== 200) {\n    color = 'red';\n    text = `HTTP ${msg.statusCode}: ${msg.payload}`\n} else {\n    var status = JSON.parse(msg.payload);\n    if (status.frc) {\n        color = 'green';\n        text = `Set charging to ${msg.payload_in}`\n    } else {\n        color = 'red';\n        text = `${status}`\n    }\n} \n\nnode.status({\n    fill: color,\n    shape: 'dot',\n    text: `${time} ${text}`\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "0c116f1b76d5bc61",
        "type": "status",
        "z": "39e4f6d7bc65b2db",
        "name": "",
        "scope": [
            "6c60cc0e10dbb554"
        ],
        "x": 100,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c4a38b1d8901c4a5",
        "type": "function",
        "z": "468aa6b1e72fc9d2",
        "name": "",
        "func": "function random(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nif (env.get(\"bypass\")) {\n    node.status({\n        fill: 'green',\n        shape: 'dot',\n        text:`bypass`\n    });\n    return msg;\n}\n\nvar min = env.get(\"minCurrent\") || 0;\nvar max = env.get(\"maxCurrent\") || 0;\nif (min > max) {\n    min = max;\n}\nvar orig = msg.payload;\nvar val = Number(msg.payload);\nvar load = random(min, max);\nmsg.payload = (val + load).toFixed(2);\n\nnode.status({\n    fill: 'green',\n    shape: 'dot',\n    text:`${orig} + ${load.toFixed(2)} = ${msg.payload} A`\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2d25d99fd9396d90",
        "type": "status",
        "z": "468aa6b1e72fc9d2",
        "name": "",
        "scope": null,
        "x": 160,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "54ba9f9ec7fbc7bb",
        "type": "mqtt out",
        "z": "ed9c44006b3afbd1",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "df1407b1752224f3",
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "65395490d8b06483",
        "type": "function",
        "z": "ed9c44006b3afbd1",
        "name": "function 4",
        "func": "\nreturn [\n    {\n        topic: \"charging/current\",\n        payload: msg.payload.current  \n    },\n    {\n        topic: \"charging/load\",\n        payload: msg.payload.maxPhase \n    },\n    {\n        topic: \"charging/status\",\n        payload: msg.payload.status  \n    },\n        {\n        topic: \"charging/maxPhase\",\n        payload: `${msg.payload.maxName} ${msg.payload.maxPhase} A` \n    }\n];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 60,
        "wires": [
            [
                "54ba9f9ec7fbc7bb"
            ],
            [
                "54ba9f9ec7fbc7bb"
            ],
            [
                "54ba9f9ec7fbc7bb"
            ],
            [
                "54ba9f9ec7fbc7bb"
            ]
        ]
    },
    {
        "id": "6a6ce9b1913a8316",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "Shelly 3EM Currents",
        "topic": "shellies/shellyem3-C45BBE6A7845/emeter/+/current",
        "qos": "2",
        "datatype": "auto",
        "broker": "df1407b1752224f3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 160,
        "wires": [
            [
                "eb645b8e75deaaad"
            ]
        ]
    },
    {
        "id": "ca6ce1ad62163141",
        "type": "subflow:efb1c3cb4ec1b96e",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [
            {
                "name": "maxChargeAmps",
                "value": "14",
                "type": "str"
            }
        ],
        "x": 1080,
        "y": 160,
        "wires": [
            [
                "48cb75c19c95a4d8",
                "0b54b3511b8954ac"
            ]
        ]
    },
    {
        "id": "b6c67d19522ac87d",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "c456f62e30a15dfe",
        "name": "",
        "measurement": "chargeCurrent",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "nodered",
        "bucket": "nodered",
        "x": 1540,
        "y": 40,
        "wires": []
    },
    {
        "id": "ade566d3d250a94e",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "c456f62e30a15dfe",
        "name": "",
        "measurement": "phaseCurrents",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "nodered",
        "bucket": "nodered",
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "816262a51bcc5420",
        "type": "subflow:cb6405dfef5678b9",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [],
        "x": 460,
        "y": 160,
        "wires": [
            [
                "ade566d3d250a94e",
                "46ac54afcd1bb2ef"
            ]
        ]
    },
    {
        "id": "5c848530d6f462bb",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Max Current",
        "func": "var sortable = [];\nfor (var phase in msg.payload) {\n    sortable.push([phase, msg.payload[phase]]);\n}\n\nsortable.sort(function(a, b) {\n    return b[1] - a[1];\n});\nmsg.payload = {\n    phase: sortable[0][0],\n    value: sortable[0][1]\n}\nnode.status({\n    fill: 'green',\n    shape: 'dot',\n    text:`${msg.payload.phase.toUpperCase()} ${msg.payload.value} A`\n});\n\nmsg.maxPhase = {\n    name: msg.payload.phase,\n    value: msg.payload.value\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 160,
        "wires": [
            [
                "f9be9ed9ced5073c",
                "ca6ce1ad62163141"
            ]
        ]
    },
    {
        "id": "f9be9ed9ced5073c",
        "type": "subflow:017d5dad7f46622e",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [],
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "2bf23d45ab2031e8"
            ]
        ]
    },
    {
        "id": "46ac54afcd1bb2ef",
        "type": "subflow:2fd256c6966e229b",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [],
        "x": 670,
        "y": 160,
        "wires": [
            [
                "5c848530d6f462bb"
            ]
        ]
    },
    {
        "id": "ceba56b837aa0bf7",
        "type": "subflow:e0df0ca748936d99",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [],
        "x": 1650,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a4538abbfa59c622",
        "type": "subflow:39e4f6d7bc65b2db",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [],
        "x": 1800,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "48cb75c19c95a4d8",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "If Charging",
        "property": "chargerStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Charging",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1270,
        "y": 160,
        "wires": [
            [
                "4ec310845d4ce71c"
            ]
        ]
    },
    {
        "id": "0b54b3511b8954ac",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Prepare",
        "func": "var current = 0;\nif (msg.chargerStatus === \"Charging\") {\n    current = msg.payload;\n}\nmsg.payload = {\n    current: current,\n    status : msg.chargerStatus,\n    maxPhase: msg.maxPhase.value,\n    maxName: msg.maxPhase.name\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 80,
        "wires": [
            [
                "1c5e53588ddda53e",
                "b6c67d19522ac87d"
            ]
        ]
    },
    {
        "id": "19871eb6c862638e",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "Stop",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 240,
        "wires": [
            [
                "6c40306273012a58"
            ]
        ]
    },
    {
        "id": "2bf23d45ab2031e8",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "If Overload",
        "func": "var brakerSize = 25;\nvar maxOvers = 60; // 5 min\nvar minChargeCur = 6;\nvar paused = context.get(\"paused\");\n\nif (msg.chargerStatus === \"Charging\" && !paused) {\n    if (msg.payload > brakerSize) {\n        let overs = context.get(\"overloads\") + 1;\n        node.status({\n            fill: 'red',\n            shape: 'dot',\n            text: `Overloading ${5 * overs} s`\n        });\n        if (overs >= maxOvers) {\n            context.set(\"overloads\", 0);\n            context.set(\"paused\", true);\n            return [msg, null];\n        } else {\n            context.set(\"overloads\", overs);\n            return null;\n        }\n    } else {\n        context.set(\"overloads\", 0);\n        context.set(\"paused\", false);\n        node.status({\n            fill: 'green',\n            shape: 'dot',\n            text: `OK`\n        });\n        return null;\n    }\n} else if (paused) {\n    var avail = Math.max(brakerSize - msg.payload, 0);\n    if (avail > minChargeCur) { \n        context.set(\"overloads\", 0);\n        context.set(\"paused\", false);\n        node.status({\n            fill: 'green',\n            shape: 'dot',\n            text: `OK`\n        });\n        return [null, msg];\n    } else {\n        node.status({\n            fill: 'yellow',\n            shape: 'dot',\n            text: `Load too high`\n        });\n        context.set(\"overloads\", 0);\n        return null;\n    }\n}\n\nnode.status({\n    fill: 'green',\n    shape: 'dot',\n    text: `Ignoring`\n});\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"overloads\", 0);\ncontext.set(\"paused\", false);",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "19871eb6c862638e"
            ],
            [
                "d648541135e0d394"
            ]
        ]
    },
    {
        "id": "d648541135e0d394",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "Start",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 320,
        "wires": [
            [
                "6c40306273012a58"
            ]
        ]
    },
    {
        "id": "eb645b8e75deaaad",
        "type": "subflow:468aa6b1e72fc9d2",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [
            {
                "name": "minCurrent",
                "value": "8",
                "type": "num"
            },
            {
                "name": "maxCurrent",
                "value": "10",
                "type": "num"
            }
        ],
        "x": 300,
        "y": 160,
        "wires": [
            [
                "816262a51bcc5420"
            ]
        ]
    },
    {
        "id": "ceafac0d74377514",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "How to limit max charging current",
        "info": "If you want to limit the max charging current, double click Phase Current node and select max current from dropdown menu.\n\nDefault is 16 A.",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "1c5e53588ddda53e",
        "type": "subflow:ed9c44006b3afbd1",
        "z": "f6f2187d.f17ca8",
        "name": "Publish MQTT",
        "x": 1440,
        "y": 100,
        "wires": []
    },
    {
        "id": "4ec310845d4ce71c",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "If Enabled",
        "func": "let enabled  = global.get(\"enabled\", \"persist\") || false;\n\nnode.status({\n    fill: enabled ? 'green' : 'red',\n    shape: 'dot',\n    text:`Enabled ${enabled ? 'true' : 'false'}`\n});\n\nif (enabled) {\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 160,
        "wires": [
            [
                "ceba56b837aa0bf7"
            ]
        ]
    },
    {
        "id": "6c40306273012a58",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "If Enabled",
        "func": "let enabled  = global.get(\"enabled\", \"persist\") || false;\n\nnode.status({\n    fill: enabled ? 'green' : 'red',\n    shape: 'dot',\n    text:`Enabled ${enabled ? 'true' : 'false'}`\n});\n\nif (enabled) {\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 280,
        "wires": [
            [
                "a4538abbfa59c622"
            ]
        ]
    },
    {
        "id": "dae61da9be9bf872",
        "type": "ui_slider",
        "z": "7361e20fe34a37d4",
        "name": "",
        "label": "Max Amps",
        "tooltip": "",
        "group": "eb72cd72095be319",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": "6",
        "max": "16",
        "step": 1,
        "className": "",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "e6b9ebda930520f6"
            ]
        ]
    },
    {
        "id": "51d4e8e9bb7e5443",
        "type": "ui_switch",
        "z": "7361e20fe34a37d4",
        "name": "",
        "label": "Enabled",
        "tooltip": "",
        "group": "eb72cd72095be319",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 440,
        "y": 180,
        "wires": [
            [
                "c6382b60a6669e06"
            ]
        ]
    },
    {
        "id": "381445bde9c58150",
        "type": "ui_chart",
        "z": "7361e20fe34a37d4",
        "name": "",
        "group": "ea05100403028c32",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Charging Current",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 610,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "2d86fca09ad00e1d",
        "type": "function",
        "z": "7361e20fe34a37d4",
        "name": "function 1",
        "func": "msg.topic = \"Charging Current\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [
            [
                "381445bde9c58150"
            ]
        ]
    },
    {
        "id": "15fd63864a715610",
        "type": "function",
        "z": "7361e20fe34a37d4",
        "name": "function 2",
        "func": "msg.topic = \"Status\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "f73900acacb83a0e"
            ]
        ]
    },
    {
        "id": "3c8f81249d82a8d5",
        "type": "mqtt in",
        "z": "7361e20fe34a37d4",
        "name": "",
        "topic": "charging/current",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "df1407b1752224f3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 460,
        "wires": [
            [
                "2d86fca09ad00e1d"
            ]
        ]
    },
    {
        "id": "078ac8693bac33b9",
        "type": "mqtt in",
        "z": "7361e20fe34a37d4",
        "name": "",
        "topic": "charging/status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "df1407b1752224f3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 380,
        "wires": [
            [
                "15fd63864a715610"
            ]
        ]
    },
    {
        "id": "feb1d101a44a61ab",
        "type": "function",
        "z": "7361e20fe34a37d4",
        "name": "function 3",
        "func": "msg.topic = \"Max Phase\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "381445bde9c58150"
            ]
        ]
    },
    {
        "id": "2031714c77e4fa58",
        "type": "mqtt in",
        "z": "7361e20fe34a37d4",
        "name": "",
        "topic": "charging/load",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "df1407b1752224f3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 540,
        "wires": [
            [
                "feb1d101a44a61ab"
            ]
        ]
    },
    {
        "id": "f73900acacb83a0e",
        "type": "ui_text",
        "z": "7361e20fe34a37d4",
        "group": "ea05100403028c32",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 570,
        "y": 380,
        "wires": []
    },
    {
        "id": "8f4de16a9c9a1061",
        "type": "function",
        "z": "7361e20fe34a37d4",
        "name": "function 5",
        "func": "msg.topic = \"Max Phase\";\nmsg.payload = msg.payload.toUpperCase();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "25abdc7e6c0d4414"
            ]
        ]
    },
    {
        "id": "25abdc7e6c0d4414",
        "type": "ui_text",
        "z": "7361e20fe34a37d4",
        "group": "ea05100403028c32",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Max Phase",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 590,
        "y": 300,
        "wires": []
    },
    {
        "id": "f691c25fe52f3c45",
        "type": "inject",
        "z": "7361e20fe34a37d4",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "96789d072ddf56c1",
                "211381a54d32e56f"
            ]
        ]
    },
    {
        "id": "e6b9ebda930520f6",
        "type": "function",
        "z": "7361e20fe34a37d4",
        "name": "Set",
        "func": "global.set(\"maxChargeAmps\", msg.payload, \"persist\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "96789d072ddf56c1",
        "type": "function",
        "z": "7361e20fe34a37d4",
        "name": "Get",
        "func": "msg.payload = global.get(\"maxChargeAmps\", \"persist\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "dae61da9be9bf872"
            ]
        ]
    },
    {
        "id": "547502de98339214",
        "type": "mqtt in",
        "z": "7361e20fe34a37d4",
        "name": "",
        "topic": "charging/maxPhase",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "df1407b1752224f3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 300,
        "wires": [
            [
                "8f4de16a9c9a1061"
            ]
        ]
    },
    {
        "id": "211381a54d32e56f",
        "type": "function",
        "z": "7361e20fe34a37d4",
        "name": "Get",
        "func": "msg.payload = global.get(\"enabled\", \"persist\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 180,
        "wires": [
            [
                "51d4e8e9bb7e5443"
            ]
        ]
    },
    {
        "id": "c6382b60a6669e06",
        "type": "function",
        "z": "7361e20fe34a37d4",
        "name": "Set",
        "func": "global.set(\"enabled\", msg.payload, \"persist\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 180,
        "wires": [
            []
        ]
    }
]