[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "efb1c3cb4ec1b96e",
        "type": "subflow",
        "name": "Charge Current",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "01b3f7383b477df5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 100,
                "wires": [
                    {
                        "id": "ce132e23a5f6a979",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 230,
            "y": 180,
            "wires": [
                {
                    "id": "45e7a020507cab3a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2984656079c534ea",
        "type": "subflow",
        "name": "Phase Currents",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "0aa11c1b04b03f84"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 100,
                "wires": [
                    {
                        "id": "497318dd0f03a08d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 210,
            "y": 200,
            "wires": [
                {
                    "id": "f13be55478436dfd",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "cb6405dfef5678b9",
        "type": "subflow",
        "name": "3 Phase",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e727d8256d3693b3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "d3492816a859ba40",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 220,
            "y": 160,
            "wires": [
                {
                    "id": "5d04a38ddacc9d16",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "df1407b1752224f3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c456f62e30a15dfe",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "01b3f7383b477df5",
        "type": "function",
        "z": "efb1c3cb4ec1b96e",
        "name": "Charge Current",
        "func": "var brakerSize = 25;\nvar maxChargeAmps = 16;\nvar minChargeAmps = 6;\nvar amps = null;\nvar maxPhase = msg.payload.value;\nvar availAmps = Math.floor(brakerSize - maxPhase);\n\nnode.debug(`max phase amps ${maxPhase}`);\nnode.debug(`available amps ${availAmps}`);\n\nif (availAmps >= maxChargeAmps) {\n    amps = maxChargeAmps;\n    node.debug(`setting charge amps to ${amps} (max)`);\n} else if (availAmps < maxChargeAmps && availAmps >= minChargeAmps) {\n    amps = availAmps;\n    node.debug(`setting charge amps to ${amps}`);\n} else if (availAmps < minChargeAmps) {\n    amps = minChargeAmps;\n    node.debug(`available amps below ${minChargeAmps}, stopping charging`);\n}\n\nmsg.topic = \"charging amps\";\nmsg.payload = amps;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "29132266ba2a58e1"
            ]
        ]
    },
    {
        "id": "45e7a020507cab3a",
        "type": "status",
        "z": "efb1c3cb4ec1b96e",
        "name": "",
        "scope": [
            "29132266ba2a58e1"
        ],
        "x": 100,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "29132266ba2a58e1",
        "type": "function",
        "z": "efb1c3cb4ec1b96e",
        "name": "Use Old",
        "func": "var shape = flow.get('shape');\nvar color = 'green';\n\nif (msg.payload == undefined) {\n    let prev = flow.get(\"prevAmps\");\n    node.debug(`using old inst ${prev}`);\n    msg.payload = prev;\n    color = 'yellow';\n}\n\nflow.set(\"prevAmps\", msg.payload);\n\nnode.status({\n    fill: color,\n    shape: shape,\n    text:`Charging ${msg.payload} A`\n});\n\nflow.set('shape', shape === 'dot' ? 'ring' : 'dot');\nmsg.topic = \"charge\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar prevAmps = 6;\nvar shape = 'dot';\nflow.set(\"prevAmps\", prevAmps);\nflow.set(\"shape\", shape);",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "115c2ac026ab67e0"
            ]
        ]
    },
    {
        "id": "115c2ac026ab67e0",
        "type": "moving-average",
        "z": "efb1c3cb4ec1b96e",
        "name": "",
        "amount": "12",
        "weight": "cumulative",
        "x": 610,
        "y": 100,
        "wires": [
            [
                "ce132e23a5f6a979"
            ]
        ]
    },
    {
        "id": "ce132e23a5f6a979",
        "type": "change",
        "z": "efb1c3cb4ec1b96e",
        "name": "Round",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "929bca3eac0884b5",
        "type": "join",
        "z": "2984656079c534ea",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "0.1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "ed01fed2bc5bd476"
            ]
        ]
    },
    {
        "id": "ed01fed2bc5bd476",
        "type": "function",
        "z": "2984656079c534ea",
        "name": "",
        "func": "var out = {};\nvar arr = [\n    {\n        i:'/0/current',\n        o: 'l1'\n    },\n    {\n        i:'1/current',\n        o: 'l2'\n    },\n    {\n        i: '2/current',\n        o: 'l3'\n    }]\nvar keys = Object.keys(msg.payload);\n\narr.forEach(function(item) {\n    keys.forEach(function(name) {\n        if (name.indexOf(item.i) !== -1) {\n            out[item.o] = Number(msg.payload[name]);\n        }\n    })\n})\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 100,
        "wires": [
            [
                "7215aa973d53b82d"
            ]
        ]
    },
    {
        "id": "7215aa973d53b82d",
        "type": "join",
        "z": "2984656079c534ea",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 630,
        "y": 100,
        "wires": [
            [
                "6f70b631b1ed2ccd"
            ]
        ]
    },
    {
        "id": "6f70b631b1ed2ccd",
        "type": "switch",
        "z": "2984656079c534ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 100,
        "wires": [
            [
                "82d6f8c38f37fb5f"
            ]
        ]
    },
    {
        "id": "82d6f8c38f37fb5f",
        "type": "change",
        "z": "2984656079c534ea",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[$count(payload) - 1]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 100,
        "wires": [
            [
                "497318dd0f03a08d"
            ]
        ]
    },
    {
        "id": "0aa11c1b04b03f84",
        "type": "switch",
        "z": "2984656079c534ea",
        "name": "",
        "property": "trigger",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "1591e753ee6960d5"
            ],
            [
                "929bca3eac0884b5"
            ]
        ]
    },
    {
        "id": "1591e753ee6960d5",
        "type": "change",
        "z": "2984656079c534ea",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 40,
        "wires": [
            [
                "7215aa973d53b82d"
            ]
        ]
    },
    {
        "id": "497318dd0f03a08d",
        "type": "function",
        "z": "2984656079c534ea",
        "name": "Status",
        "func": "var color = 'green';\nvar shape = flow.get('shape');\n\nnode.status({\n    fill: color,\n    shape: shape,\n    text:`L1 ${msg.payload.l1} A, L2 ${msg.payload.l2} A, L3 ${msg.payload.l3} A`\n});\nflow.set('shape', shape === 'dot' ? 'ring' : 'dot');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar shape = 'dot';\nflow.set('shape', shape)",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f13be55478436dfd",
        "type": "status",
        "z": "2984656079c534ea",
        "name": "",
        "scope": [
            "497318dd0f03a08d"
        ],
        "x": 100,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a55bcc5416296677",
        "type": "delay",
        "z": "cb6405dfef5678b9",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 80,
        "wires": [
            [
                "d3492816a859ba40"
            ]
        ]
    },
    {
        "id": "e727d8256d3693b3",
        "type": "join",
        "z": "cb6405dfef5678b9",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "0.1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "7e199a522a05343e"
            ]
        ]
    },
    {
        "id": "7e199a522a05343e",
        "type": "function",
        "z": "cb6405dfef5678b9",
        "name": "",
        "func": "var out = {};\nvar arr = [\n    {\n        i:'/0/current',\n        o: 'l1'\n    },\n    {\n        i:'1/current',\n        o: 'l2'\n    },\n    {\n        i: '2/current',\n        o: 'l3'\n    }]\nvar keys = Object.keys(msg.payload);\n\narr.forEach(function(item) {\n    keys.forEach(function(name) {\n        if (name.indexOf(item.i) !== -1) {\n            out[item.o] = Number(msg.payload[name]);\n        }\n    })\n})\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 80,
        "wires": [
            [
                "a55bcc5416296677"
            ]
        ]
    },
    {
        "id": "d3492816a859ba40",
        "type": "function",
        "z": "cb6405dfef5678b9",
        "name": "Status",
        "func": "var color = 'green';\nvar shape = flow.get('shape');\n\nnode.status({\n    fill: color,\n    shape: shape,\n    text:`${msg.payload.l1} ${msg.payload.l2} ${msg.payload.l3}`\n});\nflow.set('shape', shape === 'dot' ? 'ring' : 'dot');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar shape = 'dot';\nflow.set('shape', shape)",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5d04a38ddacc9d16",
        "type": "status",
        "z": "cb6405dfef5678b9",
        "name": "",
        "scope": [
            "d3492816a859ba40"
        ],
        "x": 100,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6a6ce9b1913a8316",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "Shelly 3EM Currents",
        "topic": "shellies/shellyem3-C45BBE6A7845/emeter/+/current",
        "qos": "2",
        "datatype": "auto",
        "broker": "df1407b1752224f3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 180,
        "wires": [
            [
                "816262a51bcc5420"
            ]
        ]
    },
    {
        "id": "ca6ce1ad62163141",
        "type": "subflow:efb1c3cb4ec1b96e",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [],
        "x": 660,
        "y": 180,
        "wires": [
            [
                "b6c67d19522ac87d"
            ]
        ]
    },
    {
        "id": "b6c67d19522ac87d",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "c456f62e30a15dfe",
        "name": "",
        "measurement": "chargeCurrent",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "nodered",
        "bucket": "nodered",
        "x": 940,
        "y": 180,
        "wires": []
    },
    {
        "id": "ade566d3d250a94e",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "c456f62e30a15dfe",
        "name": "",
        "measurement": "phaseCurrents",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "nodered",
        "bucket": "nodered",
        "x": 580,
        "y": 120,
        "wires": []
    },
    {
        "id": "816262a51bcc5420",
        "type": "subflow:cb6405dfef5678b9",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "env": [],
        "x": 300,
        "y": 180,
        "wires": [
            [
                "5c848530d6f462bb",
                "ade566d3d250a94e"
            ]
        ]
    },
    {
        "id": "5c848530d6f462bb",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Max Current",
        "func": "var sortable = [];\nfor (var phase in msg.payload) {\n    sortable.push([phase, msg.payload[phase]]);\n}\n\nsortable.sort(function(a, b) {\n    return b[1] - a[1];\n});\nmsg.payload = {\n    phase: sortable[0][0],\n    value: sortable[0][1]\n}\nnode.status({\n    fill: 'green',\n    shape: 'dot',\n    text:`${msg.payload.phase.toUpperCase()} ${msg.payload.value}`\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 180,
        "wires": [
            [
                "ca6ce1ad62163141"
            ]
        ]
    }
]